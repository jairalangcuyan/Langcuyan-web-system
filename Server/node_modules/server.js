const express = require('express'); // Import the Express module
const axios = require('axios'); // Import Axios for making HTTP requests
const cors = require('cors'); // Import CORS middleware

const app = express(); // Create an instance of the Express app
const PORT = 3000; // Define the port number on which the server will run

let notifications = []; // Array to store notifications in memory

// Middleware to parse incoming JSON requests
app.use(express.json()); // Use Express JSON parser to handle JSON request bodies
app.use(cors()); // Enable CORS for all routes, allowing cross-origin requests

// Endpoint to receive data and forward it to Webhook.site
app.post('/send-webhook', async (req, res) => {
    console.log('Received request body:', req.body); // Log the incoming request data for debugging
    const webhookUrl = 'https://webhook.site/9174540f-07cb-4cb5-a66e-a31335a912e4'; // URL for Webhook.site, replace with actual URL as needed

    try {
        // Forward the request data to Webhook.site using Axios
        const response = await axios.post(webhookUrl, req.body, {
            headers: {
                'Content-Type': 'application/json', // Set content type to JSON
            },
        });
        console.log('Webhook response data:', response.data); // Log the response from Webhook.site
        notifications.push(req.body); // Store the received notification in the notifications array

        // Send success response back to the client
        res.status(200).json({
            message: 'Data sent to webhook successfully', // Success message
            data: response.data, // Include response data from Webhook.site
        });
    } catch (error) {
        console.error('Error sending data to webhook:', error.response?.data || error.message); // Log error details
        // Send error response back to the client
        res.status(500).json({
            message: 'Failed to send data to webhook', // Error message
            error: error.response?.data || error.message, // Include error details
        });
    }
});

// New endpoint to retrieve stored notifications
app.get('/notifications', (req, res) => {
    res.status(200).json(notifications); // Respond with stored notifications in JSON format
});

// Start the server and listen on specified port
app.listen(PORT, () => {
    console.log(`Node server is running on http://localhost:${PORT}`); // Log message indicating the server is running
});
